This ZenPack provides support for monitoring Microsoft Windows. Monitoring is performed using the Windows Remote Management (WinRM) and Windows Remote Shell (WinRS) to collect Windows Management Instrumentation (WMI) and Perfmon data. This ZenPack is compatible with Zenoss Core and Resource Manager versions 4.1.1, 4.2.3, 4.2.4.

<span style="color: red; font-weight:bold">This ZenPack is currently in an open beta. See [[ZenPack:Microsoft_Windows|Microsoft Windows]] for the current ZenPack.</span>

{{note}} This ZenPack supersedes the earlier ZenPack named ''ZenPacks.zenoss.WindowsMonitor'' for Windows platforms that support WinRM. If you have ''ZenPacks.zenoss.WindowsMonitor'' installed on your system, please read the [[#Transitioning from WindowsMonitor]] section below.

This ZenPack depends on [[ZenPack:PythonCollector|PythonCollector]] being installed.

== Video ==
{{#widget:YouTube|id=kP28F_aQ77E|width=640|height=360}}

== Gallery ==
<gallery widths=250px heights=127px>
windows_device.png
windows_filesystem.png
windows_graphs.png
windows_infrastructure.png
windows_interfaces.png
windows_processors.png
windows_routes.png
windows_services.png
</gallery>

== Features ==

The features added by this ZenPack can be summarized as follows. They are each detailed further below.

* Initial discovery and periodic remodeling of relevant components.
* Performance monitoring.
* Event management.

=== Discovery ===

The following components will be automatically discovered through the Windows server address, username and password you provide. The properties and relationships will be periodically updated by modeling.

[[File:windows_device.png|thumb|320px|Device]]
[[File:windows_services.png|thumb|320px|File systems]]
[[File:windows_interfaces.png|thumb|320px|Interfaces]]

;Server (Device)
: Attributes: Name, Contact, Description, Serial Number, Tag, Hardware Model, Total Memory, Total Swap, Operating System, Cluster

;Cluster (Device)
: Attributes: Name, Contact, Description, Total Memory, Total Swap, Operating System, Member Servers

;Processors
: Attributes: Name, Description, Model, Socket, Cores, Threads, Clock Speed, External Speed, Voltage, L1 Cache Size, L2 Cache Size and Speed, L3 Cache Size and Speed

;File System
: Attributes: Mount Point, Status, Storage Device, Type, Block Size, Total Blocks, Total Bytes, Maximum Name Length

;Interfaces
: Attributes: Name, Description, MAC Address, MTU, Speed, Duplex, Type, Administrative Status, Operational Status, IP Addresses

;Network Routes
: Attributes: Destination, Next Hop, Interface, Protocol, Type

;Process Sets
: Attributes: Name, Recent Matches, Process Class

;Software
: Attributes: Name, Vendor, Installation Date

;Services
: Attributes: Name, Display Name, Start Mode, Account

;Cluster Services
: Attributes: Name, Core Group, Owner Node, State, Description, Priority
: Relationships: Cluster Resources

;Cluster Resources
: Attributes: Name, Owner Node, Description, Owner Group, State
: Relationships: Cluster Service

;IIS Sites
: Attributes: Name, Status, App Pool

;SQL Server Instances
: Attributes: Name
: Relationships: SQL Server Databases

;SQL Server Databases
: Attributes: Name, Version, Owner, Last Backup, Last Log Backup, Accessible, Collation, Creation Date, Default File Group, Primary File Path
: Relationships: SQL Server Instance

;SQL Server Backups
: Attributes: Name, Device Type, Physical Allocation, Status
: Relationships: SQL Server Instance

;SQL Server Jobs
: Attributes: Name, Job ID, Description, Enabled, Date Created, Username
; Relationships: SQL Server Instance

<br clear=all>

=== Performance Monitoring ===

Perfmon counters are collected using the PowerShell Get-Counter Cmdlet within a remove shell (WinRS). The following metrics will be collected every 5 minutes by default. Any other Windows Perfmon counters can also be collected by adding them to the appropriate monitoring template.

[[File:windows_graphs.png|thumb|320px|Device-level graphs]]
[[File:windows_filesystem.png|thumb|320px|File systems]]

;Device
* \Memory\Available bytes
* \Memory\Committed Bytes
* \Memory\Pages Input/sec
* \Memory\Pages Output/sec
* \Paging File(_Total)\% Usage
* \Processor(_Total)\% Privileged Time
* \Processor(_Total)\% Processor Time
* \Processor(_Total)\% User Time
* \System\System Up Time

;Active Directory
* \NTDS\DS Client Binds/sec
* \NTDS\DS Directory Reads/sec
* \NTDS\DS Directory Searches/sec
* \NTDS\DS Directory Writes/sec
* \NTDS\DS Monitor List Size
* \NTDS\DS Name Cache hit rate
* \NTDS\DS Notify Queue Size
* \NTDS\DS Search sub-operations/sec
* \NTDS\DS Server Binds/sec
* \NTDS\DS Server Name Translations/sec
* \NTDS\DS Threads in Use
* \NTDS\KDC AS Requests
* \NTDS\KDC TGS Requests
* \NTDS\Kerberos Authentications
* \NTDS\LDAP Active Threads
* \NTDS\LDAP Bind Time
* \NTDS\LDAP Client Sessions
* \NTDS\LDAP Closed Connections/sec
* \NTDS\LDAP New Connections/sec
* \NTDS\LDAP New SSL Connections/sec
* \NTDS\LDAP Searches/sec
* \NTDS\LDAP Successful Binds/sec
* \NTDS\LDAP UDP operations/sec
* \NTDS\LDAP Writes/sec
* \NTDS\NTLM Authentications
* \NTDS\DS Client Binds/sec
* \NTDS\DS Directory Reads/sec
* \NTDS\DS Directory Searches/sec
* \NTDS\DS Directory Writes/sec
* \NTDS\DS Monitor List Size
* \NTDS\DS Name Cache hit rate
* \NTDS\DS Notify Queue Size
* \NTDS\DS Search sub-operations/sec
* \NTDS\DS Server Binds/sec
* \NTDS\DS Server Name Translations/sec
* \NTDS\DS Threads in Use
* \NTDS\LDAP Active Threads
* \NTDS\LDAP Bind Time
* \NTDS\LDAP Client Sessions
* \NTDS\LDAP Closed Connections/sec
* \NTDS\LDAP New Connections/sec
* \NTDS\LDAP New SSL Connections/sec
* \NTDS\LDAP Searches/sec
* \NTDS\LDAP Successful Binds/sec
* \NTDS\LDAP UDP operations/sec
* \NTDS\LDAP Writes/sec
* \DirectoryServices(NTDS)\DS Client Binds/sec
* \DirectoryServices(NTDS)\DS Directory Reads/sec
* \DirectoryServices(NTDS)\DS Directory Searches/sec
* \DirectoryServices(NTDS)\DS Directory Writes/sec
* \DirectoryServices(NTDS)\DS Monitor List Size
* \DirectoryServices(NTDS)\DS Name Cache hit rate
* \DirectoryServices(NTDS)\DS Notify Queue Size
* \DirectoryServices(NTDS)\DS Search sub-operations/sec
* \DirectoryServices(NTDS)\DS Server Binds/sec
* \DirectoryServices(NTDS)\DS Server Name Translations/sec
* \DirectoryServices(NTDS)\DS Threads in Use
* \DirectoryServices(NTDS)\LDAP Active Threads
* \DirectoryServices(NTDS)\LDAP Bind Time
* \DirectoryServices(NTDS)\LDAP Client Sessions
* \DirectoryServices(NTDS)\LDAP Closed Connections/sec
* \DirectoryServices(NTDS)\LDAP New Connections/sec
* \DirectoryServices(NTDS)\LDAP New SSL Connections/sec
* \DirectoryServices(NTDS)\LDAP Searches/sec
* \DirectoryServices(NTDS)\LDAP Successful Binds/sec
* \DirectoryServices(NTDS)\LDAP UDP operations/sec
* \DirectoryServices(NTDS)\LDAP Writes/sec

;Exchange
* \MSExchangeIS Mailbox(_Total)\Folder opens/sec
* \MSExchangeIS Mailbox(_Total)\Local delivery rate
* \MSExchangeIS Mailbox(_Total)\Message Opens/sec
* \MSExchangeIS\RPC Averaged Latency
* \MSExchangeIS\RPC Operations/sec
* \MSExchangeIS\RPC Requests
* \SMTP Server(_Total)\Local Queue Length
* \SMTP Server(_Total)\Messages Delivered/sec
* \MSExchangeTransport Queues(_Total)\Active Mailbox Delivery Queue Length
* \MSExchangeTransport Queues(_Total)\Messages Completed Delivery Per Second
* \MSExchangeIS Mailbox(_Total)\Folder opens/sec
* \MSExchangeIS Mailbox(_Total)\Local delivery rate
* \MSExchangeIS Mailbox(_Total)\Message Opens/sec
* \MSExchangeIS\RPC Averaged Latency
* \MSExchangeIS\RPC Operations/sec
* \MSExchangeIS\RPC Requests

; IIS
* \Web Service(_Total)\Bytes Received/sec
* \Web Service(_Total)\Bytes Sent/sec
* \Web Service(_Total)\CGI Requests/sec
* \Web Service(_Total)\Connection Attempts/sec
* \Web Service(_Total)\Copy Requests/sec
* \Web Service(_Total)\Delete Requests/sec
* \Web Service(_Total)\Files Received/sec
* \Web Service(_Total)\Files Sent/sec
* \Web Service(_Total)\Get Requests/sec
* \Web Service(_Total)\Head Requests/sec
* \Web Service(_Total)\ISAPI Extension Requests/sec
* \Web Service(_Total)\Lock Requests/sec
* \Web Service(_Total)\Mkcol Requests/sec
* \Web Service(_Total)\Move Requests/sec
* \Web Service(_Total)\Options Requests/sec
* \Web Service(_Total)\Other Request Methods/sec
* \Web Service(_Total)\Post Requests/sec
* \Web Service(_Total)\Propfind Requests/sec
* \Web Service(_Total)\Proppatch Requests/sec
* \Web Service(_Total)\Put Requests/sec
* \Web Service(_Total)\Search Requests/sec
* \Web Service(_Total)\Trace Requests/sec
* \Web Service(_Total)\Unlock Requests/sec

;SQLServer
* \SQLServer:Access Methods\Full Scans/sec
* \SQLServer:Buffer Manager\Buffer cache hit ratio
* \SQLServer:Buffer Manager\Free pages
* \SQLServer:Databases(_Total)\Data File(s) Size (KB)
* \SQLServer:General Statistics\User Connections
* \SQLServer:Latches\Latch Waits/sec
* \SQLServer:Locks(_Total)\Average Wait Time (ms)
* \SQLServer:Locks(_Total)\Lock Requests/sec
* \SQLServer:Locks(_Total)\Number of Deadlocks/sec
* \SQLServer:SQL Statistics\Batch Requests/sec

;File Systems
* \Disk Read Bytes/sec
* \% Disk Read Time
* \Disk Write Bytes/sec
* \% Disk Write Time
* \Free Megabytes

;Interfaces
* \Bytes Received/sec
* \Bytes Sent/sec
* \Packets Received Errors
* \Packets Received/sec
* \Packets Outbound Errors
* \Packets Sent/sec

;IIS Sites
* \Bytes Received/sec
* \Bytes Sent/sec
* \CGI Requests/sec
* \Connection Attempts/sec
* \Copy Requests/sec
* \Connection Attempts/sec
* \Delete Requests/sec
* \Files Received/sec
* \Files Sent/sec
* \Get Requests/sec
* \Head Requests/sec
* \ISAPI Extension Requests/sec
* \Lock Requests/sec
* \Mkcol Requests/sec
* \Move Requests/sec
* \Options Requests/sec
* \Other Request Methods/sec
* \Post Requests/sec
* \Propfind Requests/sec
* \Proppatch Requests/sec
* \Put Requests/sec
* \Search Requests/sec
* \Trace Requests/sec
* \Unlock Requests/sec

The following metrics are collected directly via WMI.

;Processes (Win32_PerfFormattedData_PerfProc_Process)
* PercentProcessorTime
* WorkingSet
* WorkingSetPrivate (not available on Windows 2003)

<br clear=all>

{{note}} IIS 6 Management compatibility needs to be installed on server side in order to use the IIS Sites component.

=== Event Management ===

Events will be collected from the Windows event log using a WinRM subscription. Various information encoded in these event classes will be used to automatically determine as best as possible the following Zenoss event fields.

;Standard Zenoss Event Fields
* device
* component
* summary
* severity
* eventClassKey (for mapping specific event types)
* eventKey (for de-duplication and auto-clear fingerprinting)

Events collected through this mechanism will be timestamped based on the time they occurred within the Windows event log. Not by the time at which they were collected.

== Usage ==

=== Adding a Windows Device ===

Use the following steps to start monitoring a Windows server using the Zenoss web interface.

# Navigate to the Infrastructure page.
# Select the Server/Microsoft/Windows device class.
# Click Details and set the configuration properties for zWinUser and zWinPassword.
# Click See All.
# Choose ''Add Single Device'' from the add device button.
# Fill out the form.
#* ''Name or IP'' must be resolvable and accessible from the collector server chosen in the ''Collector'' field.
# Click ''ADD''.

----

Alternatively you can use zenbatchload to add Windows servers from the command line. To do this, you must create a text file with hostname, username and password of all the servers you want to add. Multiple endpoints can be added under the same ''/Devices/Server/Microsoft/Windows'' section. Here is an example...

<syntaxhighlight lang="text">
/Devices/Server/Microsoft/Windows
win2003-1d.example.com zWinUser="Administrator", zWinPassword="password"
win2008-1d.example.com zWinUser="Administrator", zWinPassword="password"
Win2012-1d.example.com zWinUser="Administrator", zWinPassword="password"
</syntaxhighlight>

You can then load the Windows servers into Zenoss Core or Resource Manager as devices with the following command.

<syntaxhighlight lang="bash">
zenbatchload <filename>
</syntaxhighlight>

== Setting up WinRM Service on Target Windows Machines ==

Windows server operating systems from Windows 2003 SP1 are supported. The reason for this is that WinRM version 2 is required, and it was only added in Windows 2003 SP1.

* Open ports 5985/5986 for WinRM
* Run command prompt as Administrator
* winrm quickconfig
* winrm s winrm/config/service @{AllowUnencrypted="true";MaxConcurrentOperationsPerUser="4294967295"}
* winrm s winrm/config/service/auth @{Basic="true"}
* winrm s winrm/config/winrs @{MaxShellsPerUser="2147483647"}
* winrm s winrm/config/winrs @{IdleTimeout="7200000"}

{{note}} The above instructions use the max values for MaxConcurrentOperationsPerUser and WinRS MaxShellsPerUser. If you do not want to set these to the max, then a value of 50 should be adequate. The default is 5 on both, which will cause problems because Zenoss will open up concurrent requests for each WQL query and set of Perfmon counters.

== Transitioning from WindowsMonitor ==

If you are installing this ZenPack on an existing Zenoss system or upgrading from an earlier Zenoss version you may have a ZenPack named ''ZenPacks.zenoss.WindowsMonitor'' already installed on your system. You can check this by navigating to Advanced -> ZenPacks.

This ZenPack functionally supersedes ''ZenPacks.zenoss.WindowsMonitor'' for Windows platforms that support WinRM, but does not automatically migrate monitoring of your Microsoft Windows resources when installed. The ZenPacks can coexist gracefully to allow you time to manually transition monitoring to the newer ZenPack with better capabilities.

# Navigate to the Infrastructure page.
# Expand the Server/Windows/WMI device class.
# Single-click to select a Windows device.
# Click the delete (''-'') button in the bottom-left.
# Click OK to confirm deleting the Windows device.
# Add the device back using the [[#Adding a Windows Device]] instructions above. Be sure to select the /Server/Microsoft/Windows device class and not the /Server/Windows/WMI device class.
# Repeat steps 3-6 for each Windows device.

If you have Windows Server 2000 machines you can continue to monitor them with the ''ZenPacks.zenoss.WindowsMonitor'' ZenPack while moving other Windows devices to the new WinRM-based ZenPack's device class, ''/Server/Microsoft/Windows''. On Windows Server 2003, the WinRM service must be installed (it does not ship with the OS like it does with later versions of Windows server).

Old Windows ZenPacks:

* PySamba
* WindowsMonitor
* ActiveDirectory
* IISMonitor
* MSExchange
* MSMQMonitor
* MSSQLServer

New Windows ZenPacks:
* [[ZenPack:PythonCollector|PythonCollector]]
* This ZenPack (all the functionality of the old Windows ZenPacks is rolled into this one ZenPack)

The old ZenPacks come as part of the Zenoss Core 4.2.x RPM. They can be installed on top of an RM install with the msmonitor RPM

== Limitations of Beta Release ==

The Beta release of the new WinRM-based Windows ZenPack does not support the following features:

* NTLMv2 (only basic authentication of local accounts is supported)
* Kerberos (Active Directory authentication)
* HTTPS
* SPNEGO (encrypted payload over HTTP)
* Network Load Balancing

== Troubleshooting ==

Please refer the the Zenoss Service Dynamics documentation if you run into any of the following problems:

* ZenPack will not install
* Adding a device fails
* Don't understand how to add a device
* Don't understand how to model a device

If you cannot find the answer in the documentation, then Resource Manager (Service Dynamics) users should contact [https://support.zenoss.com Zenoss Customer Support]. Core users can use the #zenoss IRC channel or the community.zenoss.org forums (there is a forum specific to Windows monitoring).

== Installed Items ==

Installing this ZenPack will add the following items to your Zenoss system.

;Device Classes
* /Server/Microsoft
* /Server/Microsoft/Windows
* /Server/Microsoft/Cluster

;Modeler Plugins
* zenoss.winrm.WinOS
* zenoss.winrm.ClusterOS
* zenoss.winrm.FileSystems
* zenoss.winrm.Interfaces
* zenoss.winrm.Routes
* zenoss.winrm.Processes
* zenoss.winrm.Services
* zenoss.winrm.Software
* zenoss.winrm.WinCluster
* zenoss.winrm.WinIIS
* zenoss.winrm.WinMSSQL

;Datasource Types
* WinRS
* WinEvents
* Windows Process
* WinServices
* IISSite

;Monitoring Templates
* Device (in /Server/Microsoft)
* FileSystem (in /Server/Microsoft)
* ethernetCsmacd (in /Server/Microsoft)
* OSProcess (in /Server/Microsoft)
* OSProcess-2003 (in /Server/Microsoft)
* WinService (in /)
* Active Directory (in /Server/Microsoft)
* Active Directory 2008 (in /Server/Microsoft)
* Active Directory 2008R2 (in /Server/Microsoft)
* IIS (in /Server/Microsoft)
* IISADMIN (in /Server/Microsoft)
* IISSites (in /Server/Microsoft)
* MSExchangeIS (in /Server/Microsoft)
* MSExchangeIS 2007 (in /Server/Microsoft)
* MSSQLServer (in /Server/Microsoft)
* WinDatabase (in /Server/Microsoft)
* Cluster (in /Server/Microsoft)
* ClusterService (in /Server/Microsoft/Cluster)
* ClusterResource (in /Server/Microsoft/Cluster)

;Troubleshooting:
* Powershell
try{     add-type -AssemblyName 'Microsoft.SqlServer.ConnectionInfo, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91'     }catch{     try{          add-type -AssemblyName 'Microsoft.SqlServer.ConnectionInfo, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91'          }     catch{          add-type -AssemblyName 'Microsoft.SqlServer.ConnectionInfo, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91'          }}$con = new-object ('Microsoft.SqlServer.Management.Common.ServerConnection') 'dbname', 'username', 'password';$server = new-object ('Microsoft.SqlServer.Management.Smo.Server') $con;'$server.Databases | foreach {write-host "Name---" $_, "`tVersion---" $_.Version, "`tIsAccessible---" $_.IsAccessible, "`tID---\" $_.ID, "`tOwner---\" $_.Owner, "`tLastBackupDate---" $_.LastBackupDate, "`tCollation---" $_.Collation, "`tCreateDate---" $_.CreateDate, "`tDefaultFileGroup---" $_.DefaultFileGroup, "`tPrimaryFilePath---" $_.PrimaryFilePath, "`tLastLogBackupDate---" $_.LastLogBackupDate};$server.BackupDevices | foreach {write-host "Name---" $_.Name,"`tDeviceType---" $_.BackupDeviceType, "`tPhysicalLocation---" $_.PhysicalLocation, "`tStatus---" $_.State};

* WMI
** select * from Win32_SystemEnclosure
** select * from Win32_ComputerSystem
** select * from Win32_OperatingSystem
** select * from Win32_Processor
** select * from Win32_CacheMemory
** select * from Win32_IP4RouteTable
** select * from Win32_NetworkAdapter
** select * from Win32_NetworkAdapterConfiguration
** select * from Win32_logicaldisk
** select * from Win32_Volume
** select * from Win32_MappedLogicalDisk
** select * from Win32_Service
** select Name, InstallDate, Vendor from Win32_Product
** select name, state, status, displayname from Win32_Service where name = ""
** select ServerAutoStart from IIsWebServerSetting where name=""
** namespace = microsoftiisv2
** select * from IIsWebVirtualDirSetting
** select * from IIsWebServerSetting
** namespace = mscluster
** select * from mscluster_cluster
* SQL
** select s.name as jobname, s.job_id as jobid, s.enabled as enabled, s.date_created as datecreated, s.description as description, l.name as username from msdb..sysjobs s left join master.sys.syslogins l on s.owner_sid = l.sid
** select instance_name as databasename, counter_name as ckey, cntr_value as cvalue from sys.dm_os_performance_counters where instance_name = ''


* Registry
** To find SQL Server instances
** HKLM:\Software\Wow6432Node\Microsoft\Microsoft SQL Server\
** HKLM:\Software\Microsoft\Microsoft SQL Server\
